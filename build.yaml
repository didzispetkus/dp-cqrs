# Build numbering format
name: $(date:yyyyMMdd)$(rev:.r)

variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'

pool:
  name: Hosted VS2017
  demands:
  - msbuild
  - visualstudio
  - vstest

steps:

# Ensure NuGet installed
- task: NuGetToolInstaller@0
  displayName: 'Use NuGet 4.9.2'
  inputs:
    versionSpec: 4.9.2


 # Restore NuGet packages
- task: NuGetCommand@2
  displayName: 'NuGet Restore'
  inputs:
    command: restore
    restoreSolution: '**\*.sln'


# Build solution
- task: VSBuild@1
  displayName: 'Build Solution'
  inputs:
    solution: '**\*.sln'
    vsVersion: latest
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)


# Run unit test
- task: VSTest@2
  displayName: 'Run Unit Tests'
  inputs:
    testAssemblyVer2: |
     **\*.Tests.dll
     !**\*TestAdapter.dll
     !**\obj\**

    codeCoverageEnabled: true
    platform: $(buildPlatform)
    configuration: $(buildConfiguration)

# Nuget pack does not support "-SymbolPackageFormat snupkg" switch and NuGet custom does not support wildcards,
# therefore as a workaround, there are two explicit NuGet packing tasks. 
# Need to look into how we can do this more dynamically, so when adding new project we do not need to create a new task to create nuget packages

# Build NuGet packages
- task: NuGetCommand@2
  displayName: 'NuGet Pack CQRS'
  inputs:
    command: custom
    arguments: 'pack src/DP.CQRS/DP.CQRS.csproj -IncludeReferencedProjects -Symbols -SymbolPackageFormat snupkg -OutputDirectory $(Build.ArtifactStagingDirectory)/packages -Properties Configuration=$(buildConfiguration)'

# Build NuGet packages
- task: NuGetCommand@2
  displayName: 'NuGet Pack CQRS Async'
  inputs:
    command: custom
    arguments: 'pack src/DP.CQRS.Async/DP.CQRS.Async.csproj -IncludeReferencedProjects -Symbols -SymbolPackageFormat snupkg -OutputDirectory $(Build.ArtifactStagingDirectory)/packages -Properties Configuration=$(buildConfiguration)'

# Publish Artifacts
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)
    ArtifactName: artifacts